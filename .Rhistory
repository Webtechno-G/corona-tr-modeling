library(incidence)
source("prepare_data.R")
source("setup.R")
plot(as.incidence(daily_cases_data[-1], dates = allDates_agg[-1]))
m_relax_in = 0
load(paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
parameterSummary = summary(T_modelTR, c("gamma_s","tau"), probs = c(0.025, 0.25, 0.50, 0.75, 0.975));
list_of_draws <- rstan::extract(T_modelTR)
si=(1/(list_of_draws$gamma_s)+1/(list_of_draws$tau))
res_parametric_si <- estimate_R(daily_cases_data[-1],
method="parametric_si",
config = make_config(list(
mean_si = mean(si),
std_si = 10*sd(si)))
)
head(res_parametric_si$R)
res_parametric_si$dates=allDates_agg[-1];
png(filename=paste0(path2save,"/FIGS/RE_estimate.png"),
width     = 6.25,
height    = 6.25,
units     = "in",
res       = 1200)
plot(res_parametric_si, legend = FALSE)
dev.off()
# Setup
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("setup.R")
library(anytime)
library(readr)
library(splines)
library(forecast)
# load the data
data_all         = (read.csv("DATA/CORONA_TR.csv") %>% tbl_df())
cases_data_all   = data_all[,2];
deaths_data_all  = data_all[,4];
icu_data_all     = data_all[,6];
recov_data_all   = data_all[,7];
test_data_all    = data_all[,8];
popsize_data_all = 84180493;
allDates     = as.Date(parse_datetime(as.character(data_all$Date),"%d.%m.%y"));
date_data    = as.Date("2020-03-10");
date_end     = as.Date(tail(allDates, n=1));
data_start   = ymd(date_data)
data_end     = ymd(date_end)
data_control_1 = ymd("2020-03-18") # first lockdown (assuming 2 lockdowns)
date_control_1 = ymd("2020-03-18")
data_control_2 = ymd("2020-04-03") # second lockdown (assuming 2 lockdowns)
date_control_2 = ymd("2020-04-03")
date_control_3 = ymd("2020-03-21") # mid lockdown (assuming 1 lockdown)
data_control_3 = ymd("2020-03-21")
date_relax     = ymd("2020-05-11") # relaxation (if any)
test_data_all   = as.numeric(unlist(test_data_all))
test_data_all_N = test_data_all/max(test_data_all)
recov_data_all  = as.numeric(unlist(recov_data_all))
recov_data_all_N= recov_data_all/max(recov_data_all)
x_all = seq(from=1,to=length(allDates))
# fit to lognormal function
fit_1  = nls(test_data_all_N ~ K*(1/(x_all*sig*sqrt(2*pi)))*exp(-((log(x_all)-mu)/(sqrt(2)*sig))^2), data = data.frame(x_all, test_data_all_N),
start = c(K = 70, mu = 4, sig=0.5))
test_fit_vec_1=as.numeric(coef(fit_1))
png(filename=paste0(path2save,"/FIGS/RE_estimate.png"),
width     = 6.25,
height    = 6.25,
units     = "in",
res       = 1200)
plot(fitted(fit_1))
points(test_data_all_N)
dev.off()
plot(allDates,fitted(fit_1),type="l", col="green", lwd=5, xlab="gun", ylab="normalize test sayisi")
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=5, xlab="gun", ylab="normalize test sayisi")
points(test_data_all_N,col="black")
dev.off()
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=5, xlab="gun", ylab="normalize test sayisi")
points(test_data_all_N,col="black")
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=5, xlab="gun", ylab="normalize test sayisi")
plot(test_data_all_N,col="black")
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=5, xlab="gun", ylab="normalize test sayisi")
lines(test_data_all_N,col="black")
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=1, xlab="gun", ylab="normalize test sayisi")
lines(test_data_all_N,col="black")
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=1, xlab="gun", ylab="normalize test sayisi")
lines(allDates,test_data_all_N,col="black")
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=1, xlab="gun", ylab="normalize test sayisi")
points(allDates,test_data_all_N,col="black")
points(allDates,test_data_all_N,col="black",type="2")
points(allDates,test_data_all_N,col="black",type="p")
points(allDates,test_data_all_N,col="black",type="p",pch="21")
points(allDates,test_data_all_N,col="black",type="p",pch="20")
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=1, xlab="gun", ylab="normalize test sayisi")
points(allDates,test_data_all_N,col="black",type="p",pch="20")
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=1, xlab="gun", ylab="normalize test sayisi")
points(allDates,test_data_all_N,col="black",pch="19")
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=1, xlab="gun", ylab="normalize test sayisi")
points(allDates,test_data_all_N,col="black",type="p")
legend(0,2.8,c("lognormal fonksiyon","veri"), lwd=c(5,2), col=c("blue","black"), pch=c(15,19), y.intersp=1.5)
t
t
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=1, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N))
points(allDates,test_data_all_N,col="black",type="p")
legend(0,2.8,c("lognormal fonksiyon","veri"), lwd=c(5,2), col=c("blue","black"), pch=c(15,19), y.intersp=1.5)
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=1, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N))
plot(allDates,test_data_all_N,col="black",type="p")
legend(0,2.8,c("lognormal fonksiyon","veri"), lwd=c(5,2), col=c("blue","black"), pch=c(15,19), y.intersp=1.5)
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=1, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N))
lines(allDates,test_data_all_N,col="black",type="p")
legend(0,2.8,c("lognormal fonksiyon","veri"), lwd=c(5,2), col=c("blue","black"), pch=c(15,19), y.intersp=1.5)
legend(0,2.8,c("lognormal fonksiyon","veri"), lwd=c(5,2), col=c("blue","black"))
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=1, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N))
lines(allDates,test_data_all_N,pch=18,col="black",type="p")
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=1, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N))
lines(allDates,test_data_all_N,pch=18,col="black",type="b")
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=1, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N))
lines(allDates,test_data_all_N,pch=22,col="black",type="b")
lines(allDates,test_data_all_N,pch=21,col="black",type="b")
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=2, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N))
lines(allDates,test_data_all_N,pch=21,col="black",type="b")
lines(allDates,test_data_all_N,pch=21,col="black",type="p")
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=2, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N))
lines(allDates,test_data_all_N,pch=21,col="black",type="p")
lines(allDates,test_data_all_N,pch=19,col="black",type="b", lty=2)
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=2, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N))
lines(allDates,test_data_all_N,pch=19,col="black",type="b", lty=2)
legend(0,2.8,c("lognormal fonksiyon","veri"), lwd=c(5,2), col=c("blue","black"))
legend(1, 95, legend=c("Lognormal fonksiyon", "Veri"),
col=c("blue", "black"), lty=1:2, cex=0.8)
dev.off()
# Setup
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("setup.R")
library(anytime)
library(readr)
library(splines)
library(forecast)
# load the data
data_all         = (read.csv("DATA/CORONA_TR.csv") %>% tbl_df())
cases_data_all   = data_all[,2];
deaths_data_all  = data_all[,4];
icu_data_all     = data_all[,6];
recov_data_all   = data_all[,7];
test_data_all    = data_all[,8];
popsize_data_all = 84180493;
allDates     = as.Date(parse_datetime(as.character(data_all$Date),"%d.%m.%y"));
date_data    = as.Date("2020-03-10");
date_end     = as.Date(tail(allDates, n=1));
data_start   = ymd(date_data)
data_end     = ymd(date_end)
data_control_1 = ymd("2020-03-18") # first lockdown (assuming 2 lockdowns)
date_control_1 = ymd("2020-03-18")
data_control_2 = ymd("2020-04-03") # second lockdown (assuming 2 lockdowns)
date_control_2 = ymd("2020-04-03")
date_control_3 = ymd("2020-03-21") # mid lockdown (assuming 1 lockdown)
data_control_3 = ymd("2020-03-21")
date_relax     = ymd("2020-05-11") # relaxation (if any)
test_data_all   = as.numeric(unlist(test_data_all))
test_data_all_N = test_data_all/max(test_data_all)
recov_data_all  = as.numeric(unlist(recov_data_all))
recov_data_all_N= recov_data_all/max(recov_data_all)
x_all = seq(from=1,to=length(allDates))
# fit to lognormal function
fit_1  = nls(test_data_all_N ~ K*(1/(x_all*sig*sqrt(2*pi)))*exp(-((log(x_all)-mu)/(sqrt(2)*sig))^2), data = data.frame(x_all, test_data_all_N),
start = c(K = 70, mu = 4, sig=0.5))
test_fit_vec_1=as.numeric(coef(fit_1))
png(filename=paste0(path2save,"/FIGS/TESTS_estimate.png"),
width     = 6.25,
height    = 6.25,
units     = "in",
res       = 1200)
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=2, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N))
lines(allDates,test_data_all_N,pch=19,col="black",type="b", lty=2)
legend(1, 95, legend=c("Lognormal fonksiyon", "Veri"),
col=c("blue", "black"), lty=1:2, cex=0.8)
dev.off()
png(filename=paste0(path2save,"/FIGS/TESTS_estimate.png"),
width     = 6.25,
height    = 6.25,
units     = "in",
res       = 1200)
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=2, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N))
lines(allDates,test_data_all_N,pch=19,col="black",type="b", lty=2)
legend(1, 0.9, legend=c("Lognormal fonksiyon", "Veri"), col=c("blue", "black"), lty=1:2, cex=0.8)
dev.off()
# Setup
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("setup.R")
library(anytime)
library(readr)
library(splines)
library(forecast)
# load the data
data_all         = (read.csv("DATA/CORONA_TR.csv") %>% tbl_df())
cases_data_all   = data_all[,2];
deaths_data_all  = data_all[,4];
icu_data_all     = data_all[,6];
recov_data_all   = data_all[,7];
test_data_all    = data_all[,8];
popsize_data_all = 84180493;
allDates     = as.Date(parse_datetime(as.character(data_all$Date),"%d.%m.%y"));
date_data    = as.Date("2020-03-10");
date_end     = as.Date(tail(allDates, n=1));
data_start   = ymd(date_data)
data_end     = ymd(date_end)
data_control_1 = ymd("2020-03-18") # first lockdown (assuming 2 lockdowns)
date_control_1 = ymd("2020-03-18")
data_control_2 = ymd("2020-04-03") # second lockdown (assuming 2 lockdowns)
date_control_2 = ymd("2020-04-03")
date_control_3 = ymd("2020-03-21") # mid lockdown (assuming 1 lockdown)
data_control_3 = ymd("2020-03-21")
date_relax     = ymd("2020-05-11") # relaxation (if any)
test_data_all   = as.numeric(unlist(test_data_all))
test_data_all_N = test_data_all/max(test_data_all)
recov_data_all  = as.numeric(unlist(recov_data_all))
recov_data_all_N= recov_data_all/max(recov_data_all)
x_all = seq(from=1,to=length(allDates))
# fit to lognormal function
fit_1  = nls(test_data_all_N ~ K*(1/(x_all*sig*sqrt(2*pi)))*exp(-((log(x_all)-mu)/(sqrt(2)*sig))^2), data = data.frame(x_all, test_data_all_N),
start = c(K = 70, mu = 4, sig=0.5))
test_fit_vec_1=as.numeric(coef(fit_1))
png(filename=paste0(path2save,"/FIGS/TESTS_estimate.png"),
width     = 6.25,
height    = 6.25,
units     = "in",
res       = 1200)
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=2, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N))
lines(allDates,test_data_all_N,pch=19,col="black",type="b", lty=2)
legend(1, 0.9, legend=c("Lognormal fonksiyon", "Veri"), col=c("blue", "black"), lty=1:2, cex=0.8)
dev.off()
# Setup
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("setup.R")
library(anytime)
library(readr)
library(splines)
library(forecast)
# load the data
data_all         = (read.csv("DATA/CORONA_TR.csv") %>% tbl_df())
cases_data_all   = data_all[,2];
deaths_data_all  = data_all[,4];
icu_data_all     = data_all[,6];
recov_data_all   = data_all[,7];
test_data_all    = data_all[,8];
popsize_data_all = 84180493;
allDates     = as.Date(parse_datetime(as.character(data_all$Date),"%d.%m.%y"));
date_data    = as.Date("2020-03-10");
date_end     = as.Date(tail(allDates, n=1));
data_start   = ymd(date_data)
data_end     = ymd(date_end)
data_control_1 = ymd("2020-03-18") # first lockdown (assuming 2 lockdowns)
date_control_1 = ymd("2020-03-18")
data_control_2 = ymd("2020-04-03") # second lockdown (assuming 2 lockdowns)
date_control_2 = ymd("2020-04-03")
date_control_3 = ymd("2020-03-21") # mid lockdown (assuming 1 lockdown)
data_control_3 = ymd("2020-03-21")
date_relax     = ymd("2020-05-11") # relaxation (if any)
test_data_all   = as.numeric(unlist(test_data_all))
test_data_all_N = test_data_all/max(test_data_all)
recov_data_all  = as.numeric(unlist(recov_data_all))
recov_data_all_N= recov_data_all/max(recov_data_all)
x_all = seq(from=1,to=length(allDates))
# fit to lognormal function
fit_1  = nls(test_data_all_N ~ K*(1/(x_all*sig*sqrt(2*pi)))*exp(-((log(x_all)-mu)/(sqrt(2)*sig))^2), data = data.frame(x_all, test_data_all_N),
start = c(K = 70, mu = 4, sig=0.5))
test_fit_vec_1=as.numeric(coef(fit_1))
png(filename=paste0(path2save,"/FIGS/TESTS_estimate.png"),
width     = 6.25,
height    = 6.25,
units     = "in",
res       = 1200)
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=2, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N))
lines(allDates,test_data_all_N,pch=19,col="black",type="b", lty=2)
legend(legend=c("Lognormal fonksiyon", "Veri"), col=c("blue", "black"), lty=1:2, cex=0.8)
dev.off()
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=2, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N))
lines(allDates,test_data_all_N,pch=19,col="black",type="b", lty=2)
legend(allDates[2],0.8,legend=c("Lognormal fonksiyon", "Veri"), col=c("blue", "black"), lty=1:2, cex=0.8)
png(filename=paste0(path2save,"/FIGS/TESTS_estimate.png"),
width     = 6.25,
height    = 5.25,
units     = "in",
res       = 1200)
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=2, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N))
lines(allDates,test_data_all_N,pch=19,col="black",type="b", lty=2)
legend(allDates[2],0.8,legend=c("Lognormal fonksiyon", "Veri"), col=c("blue", "black"), lty=1:2, cex=0.8)
dev.off()
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=2, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N),panel.first = grid())
lines(allDates,test_data_all_N,pch=19,col="black",type="b", lty=2,panel.first = grid())
legend(allDates[2],0.8,legend=c("Lognormal fonksiyon", "Veri"), col=c("blue", "black"), lty=1:2, cex=0.8)
dev.off()
# Setup
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("setup.R")
library(anytime)
library(readr)
library(splines)
library(forecast)
# load the data
data_all         = (read.csv("DATA/CORONA_TR.csv") %>% tbl_df())
cases_data_all   = data_all[,2];
deaths_data_all  = data_all[,4];
icu_data_all     = data_all[,6];
recov_data_all   = data_all[,7];
test_data_all    = data_all[,8];
popsize_data_all = 84180493;
allDates     = as.Date(parse_datetime(as.character(data_all$Date),"%d.%m.%y"));
date_data    = as.Date("2020-03-10");
date_end     = as.Date(tail(allDates, n=1));
data_start   = ymd(date_data)
data_end     = ymd(date_end)
data_control_1 = ymd("2020-03-18") # first lockdown (assuming 2 lockdowns)
date_control_1 = ymd("2020-03-18")
data_control_2 = ymd("2020-04-03") # second lockdown (assuming 2 lockdowns)
date_control_2 = ymd("2020-04-03")
date_control_3 = ymd("2020-03-21") # mid lockdown (assuming 1 lockdown)
data_control_3 = ymd("2020-03-21")
date_relax     = ymd("2020-05-11") # relaxation (if any)
test_data_all   = as.numeric(unlist(test_data_all))
test_data_all_N = test_data_all/max(test_data_all)
recov_data_all  = as.numeric(unlist(recov_data_all))
recov_data_all_N= recov_data_all/max(recov_data_all)
x_all = seq(from=1,to=length(allDates))
# fit to lognormal function
fit_1  = nls(test_data_all_N ~ K*(1/(x_all*sig*sqrt(2*pi)))*exp(-((log(x_all)-mu)/(sqrt(2)*sig))^2), data = data.frame(x_all, test_data_all_N),
start = c(K = 70, mu = 4, sig=0.5))
test_fit_vec_1=as.numeric(coef(fit_1))
png(filename=paste0(path2save,"/FIGS/TESTS_estimate.png"),
width     = 4.25,
height    = 2.25,
units     = "in",
res       = 1200)
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=2, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N),panel.first = grid())
lines(allDates,test_data_all_N,pch=19,col="black",type="b", lty=2,panel.first = grid())
legend(allDates[2],0.8,legend=c("Lognormal fonksiyon", "Veri"), col=c("blue", "black"), lty=1:2, cex=0.8)
dev.off()
# Setup
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("setup.R")
library(anytime)
library(readr)
library(splines)
library(forecast)
# load the data
data_all         = (read.csv("DATA/CORONA_TR.csv") %>% tbl_df())
cases_data_all   = data_all[,2];
deaths_data_all  = data_all[,4];
icu_data_all     = data_all[,6];
recov_data_all   = data_all[,7];
test_data_all    = data_all[,8];
popsize_data_all = 84180493;
allDates     = as.Date(parse_datetime(as.character(data_all$Date),"%d.%m.%y"));
date_data    = as.Date("2020-03-10");
date_end     = as.Date(tail(allDates, n=1));
data_start   = ymd(date_data)
data_end     = ymd(date_end)
data_control_1 = ymd("2020-03-18") # first lockdown (assuming 2 lockdowns)
date_control_1 = ymd("2020-03-18")
data_control_2 = ymd("2020-04-03") # second lockdown (assuming 2 lockdowns)
date_control_2 = ymd("2020-04-03")
date_control_3 = ymd("2020-03-21") # mid lockdown (assuming 1 lockdown)
data_control_3 = ymd("2020-03-21")
date_relax     = ymd("2020-05-11") # relaxation (if any)
test_data_all   = as.numeric(unlist(test_data_all))
test_data_all_N = test_data_all/max(test_data_all)
recov_data_all  = as.numeric(unlist(recov_data_all))
recov_data_all_N= recov_data_all/max(recov_data_all)
x_all = seq(from=1,to=length(allDates))
# fit to lognormal function
fit_1  = nls(test_data_all_N ~ K*(1/(x_all*sig*sqrt(2*pi)))*exp(-((log(x_all)-mu)/(sqrt(2)*sig))^2), data = data.frame(x_all, test_data_all_N),
start = c(K = 70, mu = 4, sig=0.5))
test_fit_vec_1=as.numeric(coef(fit_1))
png(filename=paste0(path2save,"/FIGS/TESTS_estimate.png"),
width     = 6.25,
height    = 5.25,
units     = "in",
res       = 1200)
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=2, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N),panel.first = grid())
lines(allDates,test_data_all_N,pch=19,col="black",type="b", lty=2,panel.first = grid())
legend(allDates[2],0.8,legend=c("Lognormal fonksiyon", "Veri"), col=c("blue", "black"), lty=1:2, cex=0.8)
dev.off()
# Setup
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("setup.R")
library(anytime)
library(readr)
library(splines)
library(forecast)
# load the data
data_all         = (read.csv("DATA/CORONA_TR.csv") %>% tbl_df())
cases_data_all   = data_all[,2];
deaths_data_all  = data_all[,4];
icu_data_all     = data_all[,6];
recov_data_all   = data_all[,7];
test_data_all    = data_all[,8];
popsize_data_all = 84180493;
allDates     = as.Date(parse_datetime(as.character(data_all$Date),"%d.%m.%y"));
date_data    = as.Date("2020-03-10");
date_end     = as.Date(tail(allDates, n=1));
data_start   = ymd(date_data)
data_end     = ymd(date_end)
data_control_1 = ymd("2020-03-18") # first lockdown (assuming 2 lockdowns)
date_control_1 = ymd("2020-03-18")
data_control_2 = ymd("2020-04-03") # second lockdown (assuming 2 lockdowns)
date_control_2 = ymd("2020-04-03")
date_control_3 = ymd("2020-03-21") # mid lockdown (assuming 1 lockdown)
data_control_3 = ymd("2020-03-21")
date_relax     = ymd("2020-05-11") # relaxation (if any)
test_data_all   = as.numeric(unlist(test_data_all))
test_data_all_N = test_data_all/max(test_data_all)
recov_data_all  = as.numeric(unlist(recov_data_all))
recov_data_all_N= recov_data_all/max(recov_data_all)
x_all = seq(from=1,to=length(allDates))
# fit to lognormal function
fit_1  = nls(test_data_all_N ~ K*(1/(x_all*sig*sqrt(2*pi)))*exp(-((log(x_all)-mu)/(sqrt(2)*sig))^2), data = data.frame(x_all, test_data_all_N),
start = c(K = 70, mu = 4, sig=0.5))
test_fit_vec_1=as.numeric(coef(fit_1))
png(filename=paste0(path2save,"/FIGS/TESTS_estimate.png"),
width     = 4.25,
height    = 2.25,
units     = "in",
res       = 800)
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=2, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N),panel.first = grid())
lines(allDates,test_data_all_N,pch=19,col="black",type="b", lty=2,panel.first = grid())
legend(allDates[2],0.8,legend=c("Lognormal fonksiyon", "Veri"), col=c("blue", "black"), lty=1:2, cex=0.8)
dev.off()
# Setup
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("setup.R")
library(anytime)
library(readr)
library(splines)
library(forecast)
# load the data
data_all         = (read.csv("DATA/CORONA_TR.csv") %>% tbl_df())
cases_data_all   = data_all[,2];
deaths_data_all  = data_all[,4];
icu_data_all     = data_all[,6];
recov_data_all   = data_all[,7];
test_data_all    = data_all[,8];
popsize_data_all = 84180493;
allDates     = as.Date(parse_datetime(as.character(data_all$Date),"%d.%m.%y"));
date_data    = as.Date("2020-03-10");
date_end     = as.Date(tail(allDates, n=1));
data_start   = ymd(date_data)
data_end     = ymd(date_end)
data_control_1 = ymd("2020-03-18") # first lockdown (assuming 2 lockdowns)
date_control_1 = ymd("2020-03-18")
data_control_2 = ymd("2020-04-03") # second lockdown (assuming 2 lockdowns)
date_control_2 = ymd("2020-04-03")
date_control_3 = ymd("2020-03-21") # mid lockdown (assuming 1 lockdown)
data_control_3 = ymd("2020-03-21")
date_relax     = ymd("2020-05-11") # relaxation (if any)
test_data_all   = as.numeric(unlist(test_data_all))
test_data_all_N = test_data_all/max(test_data_all)
recov_data_all  = as.numeric(unlist(recov_data_all))
recov_data_all_N= recov_data_all/max(recov_data_all)
x_all = seq(from=1,to=length(allDates))
# fit to lognormal function
fit_1  = nls(test_data_all_N ~ K*(1/(x_all*sig*sqrt(2*pi)))*exp(-((log(x_all)-mu)/(sqrt(2)*sig))^2), data = data.frame(x_all, test_data_all_N),
start = c(K = 70, mu = 4, sig=0.5))
test_fit_vec_1=as.numeric(coef(fit_1))
png(filename=paste0(path2save,"/FIGS/TESTS_estimate.png"),
width     = 4.25,
height    = 2.25,
units     = "in",
res       = 400)
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=2, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N),panel.first = grid())
lines(allDates,test_data_all_N,pch=19,col="black",type="b", lty=2,panel.first = grid())
legend(allDates[2],0.8,legend=c("Lognormal fonksiyon", "Veri"), col=c("blue", "black"), lty=1:2, cex=0.8)
dev.off()
# Setup
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("setup.R")
library(anytime)
library(readr)
library(splines)
library(forecast)
# load the data
data_all         = (read.csv("DATA/CORONA_TR.csv") %>% tbl_df())
cases_data_all   = data_all[,2];
deaths_data_all  = data_all[,4];
icu_data_all     = data_all[,6];
recov_data_all   = data_all[,7];
test_data_all    = data_all[,8];
popsize_data_all = 84180493;
allDates     = as.Date(parse_datetime(as.character(data_all$Date),"%d.%m.%y"));
date_data    = as.Date("2020-03-10");
date_end     = as.Date(tail(allDates, n=1));
data_start   = ymd(date_data)
data_end     = ymd(date_end)
data_control_1 = ymd("2020-03-18") # first lockdown (assuming 2 lockdowns)
date_control_1 = ymd("2020-03-18")
data_control_2 = ymd("2020-04-03") # second lockdown (assuming 2 lockdowns)
date_control_2 = ymd("2020-04-03")
date_control_3 = ymd("2020-03-21") # mid lockdown (assuming 1 lockdown)
data_control_3 = ymd("2020-03-21")
date_relax     = ymd("2020-05-11") # relaxation (if any)
test_data_all   = as.numeric(unlist(test_data_all))
test_data_all_N = test_data_all/max(test_data_all)
recov_data_all  = as.numeric(unlist(recov_data_all))
recov_data_all_N= recov_data_all/max(recov_data_all)
x_all = seq(from=1,to=length(allDates))
# fit to lognormal function
fit_1  = nls(test_data_all_N ~ K*(1/(x_all*sig*sqrt(2*pi)))*exp(-((log(x_all)-mu)/(sqrt(2)*sig))^2), data = data.frame(x_all, test_data_all_N),
start = c(K = 70, mu = 4, sig=0.5))
test_fit_vec_1=as.numeric(coef(fit_1))
png(filename=paste0(path2save,"/FIGS/TESTS_estimate.png"),
width     = 6.25,
height    = 5.25,
units     = "in",
res       = 1200)
plot(allDates,fitted(fit_1),type="l", col="blue", lwd=2, xlab="gun", ylab="normalize test sayisi",ylim=range(fitted(fit_1),test_data_all_N),panel.first = grid())
lines(allDates,test_data_all_N,pch=19,col="black",type="b", lty=2,panel.first = grid())
legend(allDates[2],0.8,legend=c("Lognormal fonksiyon", "Veri"), col=c("blue", "black"), lty=1:2, cex=0.8)
dev.off()
