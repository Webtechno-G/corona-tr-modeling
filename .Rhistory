p_gamma_H   = c(2,3),
p_gamma_ICU = c(2,3),
p_eps_H_ICU = c(2,3),
p_eps_H_x   = c(2,10),
p_eps_ICU_x = c(2,10),
p_eps_H     = c(2,3),
p_r_d_s     = c(2,10),
p_r_d_a     = c(2,10),
p_r_r_s     = c(1,1),
p_r_r_a     = c(1,1),
p_r_lock_1  = c(1,1),
p_phi       = 1/100,
t0=0,
t_data=1,
S=as.numeric(date_simul-date_data+1),
E=days2add,
ts=1:as.numeric(date_end-date_data+1),
ts_pred=1:as.numeric(date_simul-date_data+1),
r_c=0 #dummy control
)
# # IF .rds NOT compiled (run in case of change in model)
# M_model_TR     = stan_model("MODELS/model_TR.stan")
# # IF .rds  compiled
M_model_TR = readRDS("MODELS/model_TR.rds")
####### FITTING - DEBUG MODE
# T_modelTR      = sampling(M_model_TR,data = data_list,iter=5,chains=1,init="random")
####### FITTING - SHORT VERSION
T_modelTR      = sampling(M_model_TR,data = data_list,warmup=50,iter=150,chains=1,init="random")
####### FITTING - LONG VERSION
# T_modelTR      = sampling(M_model_TR,data = data_list,warmup=500,iter=1500,chains=8,init="random")
save(T_modelTR, file =paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
source("analysis_plots.R")
source("analysis_chains.R")
####### FITTING - DEBUG MODE
# T_modelTR      = sampling(M_model_TR,data = data_list,iter=5,chains=1,init="random")
####### FITTING - SHORT VERSION
T_modelTR      = sampling(M_model_TR,data = data_list,warmup=150,iter=300,chains=4,init="random")
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
path2save = paste0("OUT_",format(Sys.time(), "%d_%b_%Y"));
dir.create(path2save)
dir.create(paste0(path2save,"/CSVS/"))
dir.create(paste0(path2save,"/FIGS/"))
dir.create(paste0(path2save,"/RDATA/"))
args <- commandArgs(TRUE)
print(args)
m_relax_in = 0 # slope of relaxation -> if 0, no relaxation
library(rstan)
library(zoo)
library(Rcpp)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
source("prepare_data.R")
source("setup.R")
days2add     = 45; #ADDITIONAL DAYS FOR SIMULATION
date_simul   = date_end + days2add;
data_list = list(
pop_t=pop_size,
tswitch_1=as.numeric(date_control_3-date_data+1),
trelax=as.numeric(date_relax-date_data+1),
r_end=1,
m_relax=m_relax_in/100,
K   = test_fit_vec_1[1],
mu  = test_fit_vec_1[2],
sig = test_fit_vec_1[3],
a   = test_fit_vec_2[1],
b   = test_fit_vec_2[2],
D=as.numeric(date_end-date_data+1),
k_daily_cases  = daily_cases_data,
k_icu          = icu_data,
k_daily_deaths = daily_deaths_data,
k_daily_recov  = recov_data,
p_pi        = c(1,999),
p_R0        = c(3,1),
p_tau       = c(2,3.2),
p_gamma_s   = c(2,3.2),
p_gamma_H   = c(2,3),
p_gamma_ICU = c(2,3),
p_eps_H_ICU = c(2,3),
p_eps_H_x   = c(2,10),
p_eps_ICU_x = c(2,10),
p_eps_H     = c(2,3),
p_r_d_s     = c(2,10),
p_r_d_a     = c(2,10),
p_r_r_s     = c(1,1),
p_r_r_a     = c(1,1),
p_r_lock_1  = c(1,1),
p_phi       = 1/100,
t0=0,
t_data=1,
S=as.numeric(date_simul-date_data+1),
E=days2add,
ts=1:as.numeric(date_end-date_data+1),
ts_pred=1:as.numeric(date_simul-date_data+1),
r_c=0 #dummy control
)
# # IF .rds NOT compiled (run in case of change in model)
M_model_TR     = stan_model("MODELS/model_TR.stan")
# # IF .rds  compiled
# M_model_TR = readRDS("MODELS/model_TR.rds")
####### FITTING - DEBUG MODE
# T_modelTR      = sampling(M_model_TR,data = data_list,iter=5,chains=1,init="random")
####### FITTING - SHORT VERSION
T_modelTR      = sampling(M_model_TR,data = data_list,warmup=150,iter=300,chains=4,init="random")
####### FITTING - LONG VERSION
# T_modelTR      = sampling(M_model_TR,data = data_list,warmup=500,iter=1500,chains=8,init="random")
save(T_modelTR, file =paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
source("analysis_plots.R")
source("analysis_chains.R")
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
path2save = paste0("OUT_",format(Sys.time(), "%d_%b_%Y"));
dir.create(path2save)
dir.create(paste0(path2save,"/CSVS/"))
dir.create(paste0(path2save,"/FIGS/"))
dir.create(paste0(path2save,"/RDATA/"))
args <- commandArgs(TRUE)
print(args)
m_relax_in = 0 # slope of relaxation -> if 0, no relaxation
library(rstan)
library(zoo)
library(Rcpp)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
source("prepare_data.R")
source("setup.R")
days2add     = 45; #ADDITIONAL DAYS FOR SIMULATION
date_simul   = date_end + days2add;
data_list = list(
pop_t=pop_size,
tswitch_1=as.numeric(date_control_3-date_data+1),
trelax=as.numeric(date_relax-date_data+1),
r_end=1,
m_relax=m_relax_in/100,
K   = test_fit_vec_1[1],
mu  = test_fit_vec_1[2],
sig = test_fit_vec_1[3],
a   = test_fit_vec_2[1],
b   = test_fit_vec_2[2],
D=as.numeric(date_end-date_data+1),
k_daily_cases  = daily_cases_data,
k_icu          = icu_data,
k_daily_deaths = daily_deaths_data,
k_daily_recov  = recov_data,
p_pi        = c(1,999),
p_R0        = c(3,1),
p_tau       = c(2,3.2),
p_gamma_s   = c(2,3.2),
p_gamma_H   = c(2,3),
p_gamma_ICU = c(2,3),
p_eps_H_ICU = c(2,3),
p_eps_H_x   = c(2,10),
p_eps_ICU_x = c(2,10),
# p_eps_H     = c(2,3),
p_r_d_s     = c(2,10),
p_r_d_a     = c(2,10),
# p_r_r_s     = c(1,1),
p_r_r_a     = c(1,1),
p_r_lock_1  = c(1,1),
p_phi       = 1/100,
t0=0,
t_data=1,
S=as.numeric(date_simul-date_data+1),
E=days2add,
ts=1:as.numeric(date_end-date_data+1),
ts_pred=1:as.numeric(date_simul-date_data+1),
r_c=0 #dummy control
)
# # IF .rds NOT compiled (run in case of change in model)
M_model_TR     = stan_model("MODELS/model_TR.stan")
# # IF .rds  compiled
# M_model_TR = readRDS("MODELS/model_TR.rds")
####### FITTING - DEBUG MODE
# T_modelTR      = sampling(M_model_TR,data = data_list,iter=5,chains=1,init="random")
####### FITTING - SHORT VERSION
T_modelTR      = sampling(M_model_TR,data = data_list,warmup=150,iter=300,chains=4,init="random")
# # IF .rds  compiled
# M_model_TR = readRDS("MODELS/model_TR.rds")
####### FITTING - DEBUG MODE
# T_modelTR      = sampling(M_model_TR,data = data_list,iter=5,chains=1,init="random")
####### FITTING - SHORT VERSION
T_modelTR      = sampling(M_model_TR,data = data_list,warmup=150,iter=300,chains=1,init="random")
# # IF .rds NOT compiled (run in case of change in model)
M_model_TR     = stan_model("MODELS/model_TR.stan")
# # IF .rds  compiled
# M_model_TR = readRDS("MODELS/model_TR.rds")
####### FITTING - DEBUG MODE
# T_modelTR      = sampling(M_model_TR,data = data_list,iter=5,chains=1,init="random")
####### FITTING - SHORT VERSION
T_modelTR      = sampling(M_model_TR,data = data_list,warmup=150,iter=300,chains=1,init="random")
# # IF .rds  compiled
# M_model_TR = readRDS("MODELS/model_TR.rds")
####### FITTING - DEBUG MODE
# T_modelTR      = sampling(M_model_TR,data = data_list,iter=5,chains=1,init="random")
####### FITTING - SHORT VERSION
T_modelTR      = sampling(M_model_TR,data = data_list,warmup=5,iter=10,chains=1,init="random")
####### FITTING - LONG VERSION
# T_modelTR      = sampling(M_model_TR,data = data_list,warmup=500,iter=1500,chains=8,init="random")
save(T_modelTR, file =paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
source("analysis_plots.R")
source("analysis_chains.R")
source("analysis_plots.R")
source("analysis_chains.R")
# # IF .rds  compiled
# M_model_TR = readRDS("MODELS/model_TR.rds")
####### FITTING - DEBUG MODE
# T_modelTR      = sampling(M_model_TR,data = data_list,iter=5,chains=1,init="random")
####### FITTING - SHORT VERSION
T_modelTR      = sampling(M_model_TR,data = data_list,warmup=50,iter=150,chains=4,init="random")
####### FITTING - LONG VERSION
# T_modelTR      = sampling(M_model_TR,data = data_list,warmup=500,iter=1500,chains=8,init="random")
save(T_modelTR, file =paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
source("analysis_plots.R")
source("analysis_chains.R")
# # IF .rds NOT compiled (run in case of change in model)
M_model_TR     = stan_model("MODELS/model_TR.stan")
# # IF .rds  compiled
# M_model_TR = readRDS("MODELS/model_TR.rds")
####### FITTING - DEBUG MODE
# T_modelTR      = sampling(M_model_TR,data = data_list,iter=5,chains=1,init="random")
####### FITTING - SHORT VERSION
T_modelTR      = sampling(M_model_TR,data = data_list,warmup=50,iter=150,chains=4,init="random")
####### FITTING - LONG VERSION
# T_modelTR      = sampling(M_model_TR,data = data_list,warmup=500,iter=1500,chains=8,init="random")
save(T_modelTR, file =paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
source("analysis_plots.R")
source("analysis_chains.R")
# # IF .rds  compiled
# M_model_TR = readRDS("MODELS/model_TR.rds")
####### FITTING - DEBUG MODE
# T_modelTR      = sampling(M_model_TR,data = data_list,iter=5,chains=1,init="random")
####### FITTING - SHORT VERSION
T_modelTR      = sampling(M_model_TR,data = data_list,warmup=150,iter=300,chains=4,init="random")
####### FITTING - LONG VERSION
# T_modelTR      = sampling(M_model_TR,data = data_list,warmup=500,iter=1500,chains=8,init="random")
save(T_modelTR, file =paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
source("analysis_plots.R")
source("analysis_chains.R")
# # IF .rds NOT compiled (run in case of change in model)
M_model_TR     = stan_model("MODELS/model_TR.stan")
# # IF .rds  compiled
# M_model_TR = readRDS("MODELS/model_TR.rds")
####### FITTING - DEBUG MODE
# T_modelTR      = sampling(M_model_TR,data = data_list,iter=5,chains=1,init="random")
####### FITTING - SHORT VERSION
T_modelTR      = sampling(M_model_TR,data = data_list,warmup=150,iter=300,chains=4,init="random")
####### FITTING - LONG VERSION
# T_modelTR      = sampling(M_model_TR,data = data_list,warmup=500,iter=1500,chains=8,init="random")
save(T_modelTR, file =paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
source("analysis_plots.R")
source("analysis_chains.R")
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
path2save = paste0("OUT_",format(Sys.time(), "%d_%b_%Y"));
dir.create(path2save)
dir.create(paste0(path2save,"/CSVS/"))
dir.create(paste0(path2save,"/FIGS/"))
dir.create(paste0(path2save,"/RDATA/"))
args <- commandArgs(TRUE)
print(args)
m_relax_in = 0 # slope of relaxation -> if 0, no relaxation
library(rstan)
library(zoo)
library(Rcpp)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
source("prepare_data.R")
source("setup.R")
days2add     = 45; #ADDITIONAL DAYS FOR SIMULATION
date_simul   = date_end + days2add;
data_list = list(
pop_t=pop_size,
tswitch_1=as.numeric(date_control_3-date_data+1),
trelax=as.numeric(date_relax-date_data+1),
r_end=1,
m_relax=m_relax_in/100,
K   = test_fit_vec_1[1],
mu  = test_fit_vec_1[2],
sig = test_fit_vec_1[3],
D=as.numeric(date_end-date_data+1),
k_daily_cases  = daily_cases_data,
k_icu          = icu_data,
k_daily_deaths = daily_deaths_data,
p_pi        = c(1,999),
p_R0        = c(3,1),
p_tau       = c(2,3.2),
p_gamma_s   = c(2,3.2),
p_gamma_H   = c(2,3),
p_gamma_ICU = c(2,3),
p_eps_H_ICU = c(2,3),
p_eps_H_x   = c(2,10),
p_eps_ICU_x = c(2,10),
p_r_d_s     = c(2,10),
p_r_d_a     = c(2,10),
p_r_lock_1  = c(1,1),
p_phi       = 1/100,
t0=0,
t_data=1,
S=as.numeric(date_simul-date_data+1),
E=days2add,
ts=1:as.numeric(date_end-date_data+1),
ts_pred=1:as.numeric(date_simul-date_data+1),
r_c=0 #dummy control
)
# # IF .rds NOT compiled (run in case of change in model)
M_model_TR     = stan_model("MODELS/model_TR.stan")
# # IF .rds  compiled
# M_model_TR = readRDS("MODELS/model_TR.rds")
####### FITTING - DEBUG MODE
# T_modelTR      = sampling(M_model_TR,data = data_list,iter=5,chains=1,init="random")
####### FITTING - SHORT VERSION
T_modelTR      = sampling(M_model_TR,data = data_list,warmup=150,iter=300,chains=4,init="random")
####### FITTING - LONG VERSION
# T_modelTR      = sampling(M_model_TR,data = data_list,warmup=500,iter=1500,chains=8,init="random")
save(T_modelTR, file =paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
# # IF .rds  compiled
# M_model_TR = readRDS("MODELS/model_TR.rds")
####### FITTING - DEBUG MODE
# T_modelTR      = sampling(M_model_TR,data = data_list,iter=5,chains=1,init="random")
####### FITTING - SHORT VERSION
T_modelTR      = sampling(M_model_TR,data = data_list,warmup=50,iter=150,chains=4,init="random")
####### FITTING - LONG VERSION
# T_modelTR      = sampling(M_model_TR,data = data_list,warmup=500,iter=1500,chains=8,init="random")
save(T_modelTR, file =paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
source("analysis_plots.R")
source("analysis_chains.R")
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
path2save = paste0("OUT_",format(Sys.time(), "%d_%b_%Y"));
dir.create(path2save)
dir.create(paste0(path2save,"/CSVS/"))
dir.create(paste0(path2save,"/FIGS/"))
dir.create(paste0(path2save,"/RDATA/"))
args <- commandArgs(TRUE)
print(args)
m_relax_in = 0 # slope of relaxation -> if 0, no relaxation
library(rstan)
library(zoo)
library(Rcpp)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
source("prepare_data.R")
source("setup.R")
days2add     = 45; #ADDITIONAL DAYS FOR SIMULATION
date_simul   = date_end + days2add;
data_list = list(
pop_t=pop_size,
tswitch_1=as.numeric(date_control_3-date_data+1),
trelax=as.numeric(date_relax-date_data+1),
r_end=1,
m_relax=m_relax_in/100,
K   = test_fit_vec_1[1],
mu  = test_fit_vec_1[2],
sig = test_fit_vec_1[3],
D=as.numeric(date_end-date_data+1),
k_daily_cases  = daily_cases_data,
k_icu          = icu_data,
k_daily_deaths = daily_deaths_data,
p_pi        = c(1,999),
p_R0        = c(3,1),
p_tau       = c(2,3.2),
p_gamma_s   = c(2,3.2),
p_gamma_H   = c(2,3),
p_gamma_ICU = c(2,3),
p_eps_H_ICU = c(2,3),
p_eps_H_x   = c(2,10),
p_eps_ICU_x = c(2,10),
p_r_d_s     = c(2,10),
p_r_d_a     = c(2,10),
p_r_lock_1  = c(1,1),
p_phi       = 1/100,
t0=0,
t_data=1,
S=as.numeric(date_simul-date_data+1),
E=days2add,
ts=1:as.numeric(date_end-date_data+1),
ts_pred=1:as.numeric(date_simul-date_data+1),
r_c=0 #dummy control
)
# # IF .rds NOT compiled (run in case of change in model)
M_model_TR     = stan_model("MODELS/model_TR.stan")
# # IF .rds  compiled
# M_model_TR = readRDS("MODELS/model_TR.rds")
####### FITTING - DEBUG MODE
# T_modelTR      = sampling(M_model_TR,data = data_list,iter=5,chains=1,init="random")
####### FITTING - SHORT VERSION
T_modelTR      = sampling(M_model_TR,data = data_list,warmup=150,iter=500,chains=4,init="random")
####### FITTING - LONG VERSION
# T_modelTR      = sampling(M_model_TR,data = data_list,warmup=500,iter=1500,chains=8,init="random")
save(T_modelTR, file =paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
source("analysis_plots.R")
source("analysis_chains.R")
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
path2save = paste0("OUT_",format(Sys.time(), "%d_%b_%Y"));
library(R0)
library(rstan)
library(zoo)
library(Rcpp)
library(EpiEstim)
library(ggplot2)
library(incidence)
options(mc.cores = parallel::detectCores())
source("prepare_data.R")
# Setup
rm(list=ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
path2save = paste0("OUT_",format(Sys.time(), "%d_%b_%Y"));
library(R0)
library(zoo)
library(Rcpp)
library(EpiEstim)
library(ggplot2)
library(incidence)
source("prepare_data.R")
source("setup.R")
plot(as.incidence(daily_cases_data[-1], dates = allDates_agg[-1]))
m_relax_in = 0
load(paste0(path2save,"/RDATA/T_modelTR_mrelax_",m_relax_in,".RData"))
parameterSummary = summary(T_modelTR, c("gamma_s","tau"), probs = c(0.025, 0.25, 0.50, 0.75, 0.975));
list_of_draws <- rstan::extract(T_modelTR)
si=(1/(list_of_draws$gamma_s)+1/(list_of_draws$tau))
daily_asmp_cases_data = rev(daily_cases_data);
daily_cases_data_2 = daily_asmp_cases_data+daily_cases_data;
res_parametric_si <- estimate_R(daily_cases_data_2[-1],
method="parametric_si",
config = make_config(list(
mean_si = mean(si),
std_si = 10*sd(si)))
)
head(res_parametric_si$R)
res_parametric_si$dates=allDates_agg[-1];
plot(res_parametric_si, legend = FALSE)
mean_si
si
mean(si)
10*sd(si)
res_parametric_si <- estimate_R(daily_cases_data[-1],
method="parametric_si",
config = make_config(list(
mean_si = mean(si),
std_si = 10*sd(si)))
)
head(res_parametric_si$R)
res_parametric_si$dates=allDates_agg[-1];
plot(res_parametric_si, legend = FALSE)
ggsave(paste0(path2save,"/FIGS/RE_2.png"),width = 10, height = 6)
plot(res_parametric_si, legend = FALSE)
dev.off()
plot(res_parametric_si, legend = FALSE)
plot(res_parametric_si, legend = FALSE)
dev.off()
png(filename=paste0(path2save,"/FIGS/RE_estimate.png"))
plot(res_parametric_si, legend = FALSE)
dev.off()
filename=paste0(path2save,"/FIGS/RE_estimate.png")
filename
head(res_parametric_si$R)
res_parametric_si$dates=allDates_agg[-1];
png(filename=paste0(path2save,"/FIGS/RE_estimate.png"))
plot(res_parametric_si, legend = FALSE)
dev.off()
png(filename=paste0(path2save,"/FIGS/RE_estimate.png"),width = 480, height = 980)
plot(res_parametric_si, legend = FALSE)
dev.off()
png(filename=paste0(path2save,"/FIGS/RE_estimate.png"),width = 200, height = 400,units = "px", pointsize = 12)
plot(res_parametric_si, legend = FALSE)
dev.off()
png(filename=paste0(path2save,"/FIGS/RE_estimate.png"),width = 900, height = 1200,units = "px", pointsize = 72)
plot(res_parametric_si, legend = FALSE)
dev.off()
png(filename=paste0(path2save,"/FIGS/RE_estimate.png"),width = 900, height = 1200,units = "px", pointsize = 172)
plot(res_parametric_si, legend = FALSE)
dev.off()
png(filename=paste0(path2save,"/FIGS/RE_estimate.png"),width = 700, height = 900,units = "px", pointsize = 172)
plot(res_parametric_si, legend = FALSE)
dev.off()
png(filename=paste0(path2save,"/FIGS/RE_estimate.png"),width = 500, height = 700,units = "px", pointsize = 72)
plot(res_parametric_si, legend = FALSE)
dev.off()
png(filename=paste0(path2save,"/FIGS/RE_estimate.png"),width = 500, height = 700,type = "cairo-png")
png(filename=paste0(path2save,"/FIGS/RE_estimate.png"),width = 500, height = 700)
plot(res_parametric_si, legend = FALSE)
dev.off()
png(filename=paste0(path2save,"/FIGS/RE_estimate.png"),
png(filename=paste0(path2save,"/FIGS/RE_estimate.png"),
width     = 3.25,
height    = 3.25,
units     = "in",
res       = 1200,
pointsize = 4)
plot(res_parametric_si, legend = FALSE)
res_parametric_si$dates=allDates_agg[-1];
png(filename=paste0(path2save,"/FIGS/RE_estimate.png"),
width     = 3.25,
height    = 3.25,
units     = "in",
res       = 1200)
plot(res_parametric_si, legend = FALSE)
dev.off()
png(filename=paste0(path2save,"/FIGS/RE_estimate.png"),
width     = 6.25,
height    = 6.25,
units     = "in",
res       = 1200)
plot(res_parametric_si, legend = FALSE)
dev.off()
